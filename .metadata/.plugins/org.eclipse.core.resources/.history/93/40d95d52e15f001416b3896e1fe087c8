package com.sg.poc.core;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;

import org.apache.commons.lang.StringUtils;
import org.dom4j.Document;
import org.dom4j.Element;
import org.springframework.context.ApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;
import com.sg.poc.entity.PocServerConfig;
import com.sg.poc.service.PocServerConfigService;
import com.sg.poc.util.UrlUtil;
import com.sg.poc.util.XmlUtil;
import com.sg.util.StringUtil;
import com.sg.util.ZipUtil;


public class PocFilter implements Filter {
	
	private PocServerConfigService pocServerConfigService;  
	
	
	public PocServerConfigService getPocServerConfigService() {
		return pocServerConfigService;
	}

	public void setPocServerConfigService(
			PocServerConfigService pocServerConfigService) {
		this.pocServerConfigService = pocServerConfigService;
	}

	@Override
	public void destroy() {
		// TODO Auto-generated method stub
	}

	@SuppressWarnings("unchecked")
	@Override
	public void doFilter(ServletRequest request, ServletResponse response,
			FilterChain chain) throws IOException, ServletException {
		// TODO Auto-generated method stub
		HttpServletRequest httpRequest = ((HttpServletRequest) request);
		HttpServletResponse httpResponse = ((HttpServletResponse) response);

		String url = httpRequest.getRequestURI();
		int index = url.lastIndexOf("/");
		String lastPart = url.substring(index + 1);
		
		if(lastPart.equals("") || lastPart.indexOf(".do") > 0 || lastPart.indexOf(".jsp") > 0 || lastPart.indexOf(".css") > 0 || lastPart.indexOf(".js") > 0 || lastPart.indexOf(".jpg") > 0 || lastPart.indexOf(".png") > 0 || lastPart.indexOf(".gif") > 0 || lastPart.indexOf(".apk") > 0){
			chain.doFilter(request, response);
			return;
		}
		
		String contextPath = httpRequest.getContextPath();
		String doMain =  request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort();
		if(StringUtils.isNotEmpty(contextPath)){
			doMain = doMain + contextPath;
		}
		
		List<PocServerConfig> pocServerConfigs = pocServerConfigService.getPocServerConfigCache();
		
		String httpContentType = httpRequest.getContentType();
		
		if(pocServerConfigs != null && pocServerConfigs.size() > 0){
			System.out.println(url);
			
			boolean isPocUrl = UrlUtil.isPocUrl(httpRequest, pocServerConfigs);
			
			if(isPocUrl){
				System.out.println("begin get currentPocServerConfig");
				
				PocServerConfig model = UrlUtil.getCurrentPocServerConfig(httpRequest, pocServerConfigs);
				
				if(model != null){
					System.out.println("begin process poc request");
					
					String fullUrl = "http://" + model.getHost() + ":" + model.getPort() + url;
					model.setUrl(fullUrl);
					
					String httpMethod = model.getHttpMethod();
					String contentType = model.getContentType();
					
					String xml = "";
					
					if(httpMethod.equals("GET")){
						String clientIp = request.getRemoteAddr();
						
						String rpcclientip = "";
						String otherclientip1 = "";
						Document companyServerDoc = XmlUtil.getXmlDoc("CompanyServerConfig.xml");
						Element companyServerRootElement = companyServerDoc.getRootElement();
						List<Element> companyServerElements = companyServerRootElement.elements();
						for (Element element : companyServerElements) {
							if(element.attribute("code").getValue().equals("ShuGuo")){
								rpcclientip = element.attribute("rpcclientip").getValue();
								otherclientip1 = element.attribute("otherclientip1").getValue();
							}
						}
						
						xml = pocServerConfigService.serverGetProcess(model);
						System.out.println(xml);
						
						if(!clientIp.equals(rpcclientip) && !clientIp.equals(otherclientip1)){
							xml = ZipUtil.compress(xml);
							System.out.println("zip xml : " + xml);
							
							xml = URLEncoder.encode(xml, "UTF-8");
							System.out.println("zip encode xml : " + xml);
						}

						responseXml(httpRequest, httpResponse, xml, contentType);
					}else if (httpMethod.equals("PUT")) {
						String requestXml = getXmlByReader(httpRequest);
						System.out.println(requestXml);
						
						String urlPara = UrlUtil.getUrlPara(httpRequest);
						System.out.println(urlPara);
						
						xml = pocServerConfigService.serverPutProcess(model, requestXml, urlPara);
						responseStatus(httpRequest,httpResponse,contentType, xml);
					}else if (httpMethod.equals("DELETE")) {
						String requestXml = getXmlByReader(httpRequest);
						System.out.println(requestXml);
						
						String urlPara = UrlUtil.getUrlPara(httpRequest);
						System.out.println(urlPara);
						
						xml = pocServerConfigService.serverDeleteProcess(model, requestXml, urlPara);
						responseStatus(httpRequest,httpResponse,contentType, xml);
					}else if (httpMethod.equals("POST")) {
						String urlPara = UrlUtil.getUrlPara(httpRequest);
						System.out.println(urlPara);
						
						if(model.getContentType().equals("text/json")){
							String requestXml = "";
							
							String json = "";
							String verCategory = request.getParameter("verCategory");
							String verCode = request.getParameter("verCode");
							String ownerUri = request.getParameter("ownerUri");
							String longitude = request.getParameter("longitude");
							String latitude = request.getParameter("latitude");
							String address = request.getParameter("address");
							
							if(verCategory != null && !verCategory.equals("")){
								urlPara = urlPara + verCategory + ",";
							}
							
							if(verCode != null && !verCode.equals("")){
								urlPara = urlPara + verCode + ",";
							}
							
							if(ownerUri != null && !ownerUri.equals("")){
								urlPara = urlPara + ownerUri + ",";
							}
							
							if(longitude != null && !longitude.equals("")){
								urlPara = urlPara + longitude + ",";
							}
							
							if(latitude != null && !latitude.equals("")){
								urlPara = urlPara + latitude + ",";
							}
							
							if(address != null && !address.equals("")){
								urlPara = urlPara + address + ",";
							}
							
							if(urlPara != null && !urlPara.equals("")){
								urlPara = StringUtil.rTrim(urlPara, ",");
							}
							
							json = pocServerConfigService.serverPostProcess(model, requestXml, urlPara);
							responseJson(httpRequest, httpResponse, json);
						}else {
							String requestXml = getXmlByReader(httpRequest);
							System.out.println(requestXml);
							
							xml = pocServerConfigService.serverPostProcess(model, requestXml, urlPara);
							
							System.out.println("Post cust xml : " + xml);
							
							responseStatus(httpRequest,httpResponse,contentType, xml);
						}
					}
				}else {
					Map<String, Object> map = new HashMap<String, Object>();
					map.put("ErrorCode", "E001");
					responseError(httpRequest, httpResponse, httpContentType, map);
				}
			} else {
				Map<String, Object> map = new HashMap<String, Object>();
				map.put("ErrorCode", "E002");
				responseError(httpRequest, httpResponse, httpContentType, map);
			}
		} else {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("ErrorCode", "E003");
			responseError(httpRequest, httpResponse, httpContentType, map);
		}
	}

	@Override
	public void init(FilterConfig config) throws ServletException {
		// TODO Auto-generated method stub
		ServletContext context = config.getServletContext();  
        ApplicationContext ctx = WebApplicationContextUtils.getWebApplicationContext(context);  
        pocServerConfigService = (PocServerConfigService) ctx.getBean("pocServerConfigService");
	}
	
	private void responseXml(HttpServletRequest request, HttpServletResponse response, String xml, String contentType) throws IOException {
		response.setContentType(contentType);
		response.setHeader("Cache-Control", "no-cache");
		response.setHeader("Pragma", "no-cache");
		response.setDateHeader("Expires", 0);
		PrintWriter out = response.getWriter();
		
		out.write(xml);
	}
	
	private void responseStatus(HttpServletRequest request, HttpServletResponse response, String contentType, String responseStatus) throws IOException {
		response.setContentType(contentType);
		response.setHeader("Cache-Control", "no-cache");
		response.setHeader("Pragma", "no-cache");
		response.setDateHeader("Expires", 0);
		PrintWriter out = response.getWriter();
		out.write(responseStatus);
	}
	
	@SuppressWarnings("rawtypes")
	private void responseErrorXml(HttpServletRequest request, HttpServletResponse response, Map<String, Object> map){
		String contentType = "text/xml; charset=UTF-8";
		
		String pocXmlPath = "/com/sg/poc/xml/";
		String fileName = "error.xml";
		String fileFullName = pocXmlPath + fileName;
		Document doc = XmlUtil.getXmlDoc(fileFullName);
		Element rootElement = doc.getRootElement();
		Element errorElement = (Element)rootElement.selectSingleNode("error");
		
		String key = "";
		String value = "";
		for (Map.Entry entry : map.entrySet()) {
			key = entry.getKey().toString();
			value = entry.getValue().toString();
			break;
		}
		
		errorElement.setText(key + ":" + value);
		String xml = doc.asXML();
		
		try {
			responseXml(request, response, xml, contentType);
		} catch (Exception e) {
			// TODO: handle exception
			System.out.print(e.getMessage());
		}
	}
	
	private String getXmlByReader(HttpServletRequest httpRequest){
		StringBuffer sb = new StringBuffer();
		try {
			BufferedReader reader = httpRequest.getReader();
			String line = null;
			while((line = reader.readLine()) != null){
				sb.append(line);
			}
		} catch (Exception e) {
			// TODO: handle exception
			System.out.print(e.getMessage());
		}
		
		return sb.toString();
	}
	
	private void responseJson(HttpServletRequest request, HttpServletResponse response, String json) throws IOException {
		String CONTENT_TYPE = "text/json; charset=UTF-8";
		
		response.setContentType(CONTENT_TYPE);
		response.setHeader("Cache-Control", "no-cache");
		response.setHeader("Pragma", "no-cache");
		response.setDateHeader("Expires", 0);
		PrintWriter out = response.getWriter();
		
		out.write(json);
	}
	
	private void responseErrorJson(HttpServletRequest request, HttpServletResponse response, Map<String, Object> map){
		
		String json = "";
		JSONArray jsonArray = JSONArray.fromObject(map);
		json = jsonArray.toString();
		try {
			responseJson(request, response, json);
		} catch (Exception e) {
			// TODO: handle exception
			System.out.print(e.getMessage());
		}
	}
	
	private void responseError(HttpServletRequest request, HttpServletResponse response, String contentType, Map<String, Object> map){
		if(contentType.equals("text/json")){
			responseErrorJson(request, response, map);
		}else {
			responseErrorXml(request, response, map);
		}
	}
	
	/*private String outputXml (String xml, String path) throws Exception{
		String filePath = "";
		
		try
		{
			String fileName = UUID.randomUUID() + ".xml";
			String tempFilePath = path + "\\" + fileName;
			
			PrintWriter pw=new PrintWriter(tempFilePath);
			pw.write(xml);
			pw.close();
			
			filePath = tempFilePath;
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		
		System.out.println("生成XML文件成功!");
		
		return filePath;
	}
	
	private void sendXmlFile(HttpServletRequest request, HttpServletResponse response, String filePath) {
		if(filePath != null && !filePath.equals("")) {
			
			try {
				// path是指欲下载的文件的路径。
	            File file = new File(filePath);
	            // 取得文件名。
	            String filename = file.getName();
	            // 取得文件的后缀名。
	            String ext = filename.substring(filename.lastIndexOf(".") + 1).toUpperCase();

	            // 以流的形式下载文件。
	            InputStream fis = new BufferedInputStream(new FileInputStream(filePath));
	            byte[] buffer = new byte[fis.available()];
	            fis.read(buffer);
	            fis.close();
	            // 清空response
	            response.reset();
	            // 设置response的Header
	            response.addHeader("Content-Disposition", "attachment;filename=" + new String(filename.getBytes()));
	            response.addHeader("Content-Length", "" + file.length());
	            OutputStream toClient = new BufferedOutputStream(response.getOutputStream());
	            response.setContentType("application/octet-stream");
	            toClient.write(buffer);
	            toClient.flush();
	            toClient.close();
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
		}
	}*/
}
