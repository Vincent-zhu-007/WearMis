package com.sg.mobile.controller;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.sg.controller.AbstractController;
import com.sg.controller.JsonResult;
import com.sg.entity.Code;
import com.sg.entity.UserInfo;
import com.sg.mobile.entity.MobileCompany;
import com.sg.mobile.entity.MobileOrgStructure;
import com.sg.mobile.entity.MobileUser;
import com.sg.mobile.service.MobileCompanyService;
import com.sg.mobile.service.MobileOrgStructureService;
import com.sg.mobile.service.MobileUserService;
import com.sg.mobile.util.JsonUtil;
import com.sg.service.CodeService;
import com.sg.util.DataGridModel;
import com.sg.util.WxUtil;

@Controller
@RequestMapping("/mobileCompany.do")
public class MobileCompanyController extends AbstractController {
	private final Logger log = Logger.getLogger(MobileCompany.class);
	
	@Autowired
	private MobileCompanyService mobileCompanyService;
	
	@Autowired
	private CodeService codeService;
	
	@Autowired
	private MobileOrgStructureService mobileOrgStructureService;
	
	@Autowired
	private MobileUserService mobileUserService;
	
	/**
	 * 菜单栏页面展示
	 * 
	 * @return 页面路径
	 */
	@RequestMapping
	public String management() {
		return "mobile/mobilecompany_list";
	}

	/**
	 * mobileCompany.do?method=list 提交时，list()被调用
	 */
	@RequestMapping(params = "method=list")
	@ResponseBody
	public JsonResult list(HttpServletRequest request, MobileCompany entity,
			DataGridModel dm) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("description", entity.getDescription());
		params.put("category", "MOBILECOMPANY");

		List<MobileCompany> list = mobileCompanyService.findForPage(params,
				dm.getStartRow(), dm.getRows());
		
		Map<String, Object> statusMap = codeService.getCodeCacheMapByCategory("STATUS");
		
		for (MobileCompany mobileCompany : list) {
			String status = statusMap.get(mobileCompany.getStatus()).toString();
			mobileCompany.setStatus(status);
		}

		int totalCount = mobileCompanyService.getTotalCount(params).intValue();

		JsonResult jsonResult = new JsonResult();
		jsonResult.setTotal(totalCount);
		jsonResult.setRows(list);
		return jsonResult;
	}

	@RequestMapping(params = "method=add")
	@ResponseBody
	public JsonResult create(HttpServletRequest request, MobileCompany entity) {
		JsonResult result = new JsonResult();

		try {
			String sessionUserName = ((UserInfo)request.getSession().getAttribute("user")).getUserName();
			
			MobileOrgStructure mobileOrgStructure = new MobileOrgStructure();
			
			String orgStructureIdUuid = UUID.randomUUID().toString();
			
			mobileOrgStructure.setId(orgStructureIdUuid);
			mobileOrgStructure.setOrgStructureId(orgStructureIdUuid);
			mobileOrgStructure.setCodeName(entity.getCodeName());
			mobileOrgStructure.setCategory("MOBILEORGSTRUCTURE");
			mobileOrgStructure.setDescription(entity.getDescription());
			mobileOrgStructure.setStatus(entity.getStatus());
			mobileOrgStructure.setCreator(sessionUserName);
			mobileOrgStructure.setHasChildren("N");
			mobileOrgStructure.setDisplaySort(1);
			mobileOrgStructure.setLevelNum(1);
			mobileOrgStructure.setParentCode("");
			
			mobileOrgStructureService.create(mobileOrgStructure);
			
			/*MobileCompany*/
			String uuid = UUID.randomUUID().toString();
			entity.setId(uuid);
			entity.setCompanyId(uuid);
			entity.setCategory("MOBILECOMPANY");
			
			String keyWord = UUID.randomUUID().toString().replace("-", "");
			
			entity.setKeyWord(keyWord);
			entity.setCreator(sessionUserName);
			
			mobileCompanyService.create(entity);
			
			result.setMessage(AbstractController.AJAX_SUCCESS_CODE);
		} catch (Exception e) {
			result.setMessage(null);
			log.error("create MobileCompany exception reason:" + e.getMessage());
		}
		return result;
	}

	@RequestMapping(params = "method=update")
	@ResponseBody
	public JsonResult update(HttpServletRequest request, MobileCompany entity) {
		JsonResult result = new JsonResult();

		try {
			String sessionUserName = ((UserInfo)request.getSession().getAttribute("user")).getUserName();
			
			MobileCompany model = mobileCompanyService.get(entity.getId());
			
			model.setDescription(entity.getDescription());
			model.setStatus(entity.getStatus());
			model.setMobileHost(entity.getMobileHost());
			model.setMobilePort(entity.getMobilePort());
			model.setMobileAppName(entity.getMobileAppName());
			model.setRpcHost(entity.getRpcHost());
			model.setRpcPort(entity.getRpcPort());
			model.setRpcAppName(entity.getRpcAppName());
			
			String unzipServerIp1 = entity.getUnzipServerIp1() == null ? "" : entity.getUnzipServerIp1();
			model.setUnzipServerIp1(unzipServerIp1);
			
			String unzipServerIp2 = entity.getUnzipServerIp2() == null ? "" : entity.getUnzipServerIp2();
			model.setUnzipServerIp2(unzipServerIp2);
			
			model.setOrgStructureLayerNum(entity.getOrgStructureLayerNum());
			
			String appID = entity.getAppID() == null ? "" : entity.getAppID();
			model.setAppID(appID);
			
			String appSecret = entity.getAppSecret() == null ? "" : entity.getAppSecret();
			model.setAppSecret(appSecret);
			
			model.setUpdator(sessionUserName);
			
			mobileCompanyService.update(model);
			result.setMessage(AbstractController.AJAX_SUCCESS_CODE);
		} catch (Exception e) {
			result.setMessage(null);
			log.error("update MobileCompany exception reason:" + e.getMessage());
		}
		return result;
	}

	@RequestMapping(params = "method=get")
	@ResponseBody
	public JSONObject get(HttpServletRequest request, String id) {
		MobileCompany entity = mobileCompanyService.get(id);
		
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("id", entity.getId());
		map.put("description", entity.getDescription());
		map.put("status", entity.getStatus());
		map.put("mobileHost", entity.getMobileHost());
		map.put("mobilePort", entity.getMobilePort());
		map.put("mobileAppName", entity.getMobileAppName());
		map.put("rpcHost", entity.getRpcHost());
		map.put("rpcPort", entity.getRpcPort());
		map.put("rpcAppName", entity.getRpcAppName());
		
		String unzipServerIp1 = entity.getUnzipServerIp1() == null ? "" : entity.getUnzipServerIp1();
		map.put("unzipServerIp1", unzipServerIp1);
		
		String unzipServerIp2 = entity.getUnzipServerIp2() == null ? "" : entity.getUnzipServerIp2();
		map.put("unzipServerIp2", unzipServerIp2);
		
		map.put("orgStructureLayerNum", entity.getOrgStructureLayerNum());
		
		map.put("appID", entity.getAppID() == null ? "" : entity.getAppID());
		map.put("appSecret", entity.getAppSecret() == null ? "" : entity.getAppSecret());
		
		JSONObject jsonObject = JSONObject.fromObject(map);
		return jsonObject;
	}
	
	@RequestMapping(params = "method=isExist")
	@ResponseBody
	public boolean isExist(HttpServletRequest request, String codeName) {
		boolean result = true;
		
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("codeName", codeName);
		params.put("category", "MOBILECOMPANY");
		
		List<Code> list = codeService.findForUnPage(params);
		if(list.size() > 0) {
			result = false;
		}
		
		return result;
	}
	
	@RequestMapping(params = "method=delete")
	@ResponseBody
	public JsonResult delete(HttpServletRequest request, String ids) {
		JsonResult result = new JsonResult();

		try {
			String[] array = ids.split(",");
			
			for (String id : array) {
				MobileCompany mobileCompany = mobileCompanyService.get(id);
				String codeName = mobileCompany.getCodeName();
				
				Map<String, Object> params = new HashMap<String, Object>();
				params.put("codeName", codeName);
				params.put("category", "MOBILEORGSTRUCTURE");
				List<MobileOrgStructure> mobileOrgStructures = mobileOrgStructureService.findForUnPage(params);
				
				if(mobileOrgStructures != null && mobileOrgStructures.size() > 0){
					MobileOrgStructure mobileOrgStructure = mobileOrgStructures.get(0);
					String orgStructureId = mobileOrgStructure.getId();
					mobileOrgStructureService.delete(orgStructureId);
				}
				
				mobileCompanyService.delete(id);
			}
			
			result.setMessage(AbstractController.AJAX_SUCCESS_CODE);
		} catch (Exception e) {
			result.setMessage(null);
			log.error("delete MobileCompany exception reason:" + e.getMessage());
		}
		return result;
	}
	
	@SuppressWarnings("deprecation")
	@RequestMapping(params = "method=getfilepath")
	public void getExpFilePath(HttpServletRequest request, HttpServletResponse response) {
		String filePath = "";
		
		String description = request.getParameter("description");
		
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("description", description);
		params.put("category", "MOBILECOMPANY");
		
		List<MobileCompany> list = mobileCompanyService.findForUnPage(params);
		
		if(list.size() > 0) {
			try {
				String path = request.getRealPath("/") + "userfile\\xls";
				
				filePath = mobileCompanyService.ExpExcel(list, path);
				
			} catch (Exception e) {
				// TODO: handle exception
				System.out.print(e.getMessage());
			}
		}
		
		try {
			filePath = response.encodeURL(filePath);
			response.getWriter().write(filePath);
		} catch (Exception e) {
			// TODO: handle exception
			System.out.print(e.getMessage());
		}
	}
	
	@RequestMapping(params = "method=getmobilecompanycache")
	@ResponseBody
	public List<MobileCompany> getMobileCompanyCache(){
		return mobileCompanyService.getMobileCompanyCache();
	}
	
	@RequestMapping(params = "method=clearmobilecompanycache")
	@ResponseBody
	public JsonResult clearMobileCompanyCache(){
		JsonResult result = new JsonResult();
		
		try {
			mobileCompanyService.clearMobileCompanyCache();
			mobileCompanyService.getMobileCompanyCache();
			
			mobileOrgStructureService.clearMobileOrgStructureCache();
			mobileOrgStructureService.getMobileOrgStructureCache();
			
			result.setMessage(AbstractController.AJAX_SUCCESS_CODE);
		} catch (Exception e) {
			// TODO: handle exception
			result.setMessage(null);
		}
		
		return result;
	}
	
	@RequestMapping(params = "method=getwxaccesstoken")
	@ResponseBody
	public JsonResult getWxAccessToken(HttpServletRequest request, String id) {
		JsonResult result = new JsonResult();
		
		MobileCompany entity = mobileCompanyService.get(id);
		
		if(entity != null){
			boolean isGetNewAccessToken = false;
			String accessToken = entity.getAccessToken();
			
			if(accessToken != null && !accessToken.equals("")){
				if(entity.getTokenCreateTime() != null){
					Date d1 = new Date();
					Date d2 = entity.getTokenCreateTime();
					
					long diff = d1.getTime() - d2.getTime();
					long hours = diff / (1000 * 60 * 60);
					
					if(hours >= 2){
						isGetNewAccessToken = true;
					}
				}
			}else {
				isGetNewAccessToken = true;
			}
			
			if(isGetNewAccessToken){
				String appId = entity.getAppID();
				String appSecret = entity.getAppSecret();
				String processType = "WX_GET_ACCESSTOKEN";
				
				if(appId != null && !appId.equals("") && appSecret != null && !appSecret.equals("")){
					String json = WxUtil.processWxRequestByGetToken(appId, appSecret, processType);
					
					String jsonData = JsonUtil.getJsonResult(json);
					
					if(jsonData != null && !jsonData.equals("")){
						JSONObject jsonObject = JSONObject.fromObject(jsonData);
						if(jsonObject.containsKey("access_token")){
							accessToken = jsonObject.get("access_token").toString();
							
							entity.setAccessToken(accessToken);
							Date now = new Date();
							entity.setTokenCreateTime(now);
							
							mobileCompanyService.update(entity);
						}
					}
				}
			}
			
			result.setMessage(AbstractController.AJAX_SUCCESS_CODE);
		}
		
		return result;
	}
	
	@RequestMapping(params = "method=sendserverinformation")
	@ResponseBody
	public JsonResult sendServerInformation(HttpServletRequest request, MobileCompany entity) {
		JsonResult result = new JsonResult();
		
		try {
			MobileCompany mobileCompany = mobileCompanyService.get(entity.getId());
			
			if(mobileCompany != null){
				String httpServerHost = entity.getMobileHost();
				String httpServerPort = entity.getMobilePort();
				String mqttServerHost = entity.getRpcHost();
				String mqttServerPort = entity.getRpcPort();
				
				List<MobileUser> mobileUsers = mobileUserService.getMobileUserByCompanyCode(mobileCompany.getCodeName());
				
				if(mobileUsers != null && mobileUsers.size() > 0){
					for (MobileUser mobileUser : mobileUsers) {
						String ownerUri = mobileUser.getOwnerUri();
						String userName = mobileUser.getUserName();
						
						mobileCompanyService.runMqttPushMobileCompany(ownerUri, userName, httpServerHost, httpServerPort, mqttServerHost, mqttServerPort, mobileCompany);
					}
				}
			}
		} catch (Exception e) {
			// TODO: handle exception
		}
		
		result.setMessage(AbstractController.AJAX_SUCCESS_CODE);
		
		return result;
	}
}
